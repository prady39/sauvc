// Generated by gencpp from file underwater_sensor_msgs/SpawnMarkerResponse.msg
// DO NOT EDIT!


#ifndef UNDERWATER_SENSOR_MSGS_MESSAGE_SPAWNMARKERRESPONSE_H
#define UNDERWATER_SENSOR_MSGS_MESSAGE_SPAWNMARKERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace underwater_sensor_msgs
{
template <class ContainerAllocator>
struct SpawnMarkerResponse_
{
  typedef SpawnMarkerResponse_<ContainerAllocator> Type;

  SpawnMarkerResponse_()
    : success(false)
    , status_message()  {
    }
  SpawnMarkerResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , status_message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  _status_message_type status_message;





  typedef boost::shared_ptr< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnMarkerResponse_

typedef ::underwater_sensor_msgs::SpawnMarkerResponse_<std::allocator<void> > SpawnMarkerResponse;

typedef boost::shared_ptr< ::underwater_sensor_msgs::SpawnMarkerResponse > SpawnMarkerResponsePtr;
typedef boost::shared_ptr< ::underwater_sensor_msgs::SpawnMarkerResponse const> SpawnMarkerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator1> & lhs, const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.status_message == rhs.status_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator1> & lhs, const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace underwater_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ec6f3eff0161f4257b808b12bc830c2";
  }

  static const char* value(const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
  static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "underwater_sensor_msgs/SpawnMarkerResponse";
  }

  static const char* value(const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success				# Returns True if the request was successfull\n"
"string status_message			# Comments on the request\n"
"\n"
;
  }

  static const char* value(const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnMarkerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::underwater_sensor_msgs::SpawnMarkerResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNDERWATER_SENSOR_MSGS_MESSAGE_SPAWNMARKERRESPONSE_H
